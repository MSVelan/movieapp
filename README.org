#+title: Practical Microservices Project in Go

This repository consists of three microservices: movie, metadata and rating. This is a practice project that I used to learn about microservices.

** Services implemented:

*** Movie metadata service
- API: Get metadata for a movie and Put metadata for a movie
- Database: Movie metadata database (in-memory and MySQL implementation)
- Interacts with services: None
- Data model type: Movie metadata

*** Rating service
- API: Get the aggregated rating for a record and write a rating
- Database: Rating database (in-memory and MySQL implementation)
- Interacts with service: None
- Data model type: Rating

*** Movie service
- API: Get movie details, including aggregated ratings and movie metadata
- Database: None
- Interacts with service: Movie metadata and rating
- Data model type: Movie details

  [[./img/services.png]]

** Implementations
- service discovery with HashiCorp/Consul
- synchronous communication using HTTP API endpoints as well as gRPC endpoints.
- asynchronous communication using Apache Kafka
- in-memory data stores and MySQL for the microservices

For more details on how I implemented this, please check out [[./notes.md][notes.md]].

** Setup

*** Hashicorp/Consul Setup

#+begin_src shell
docker run -d -p 8500:8500 -p 8600:8600/udp --name=dev-consul hashicorp/consul agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
#+end_src


*** Kafka Setup
**** Docker

Get the Docker image:

#+begin_src shell
docker pull apache/kafka:4.0.0
#+end_src

Start the Kafka Docker container:

#+begin_src shell
docker run -p 9092:9092 apache/kafka:4.0.0
#+end_src

**** Run locally:

Generate a Cluster UUID

#+begin_src shell
KAFKA_CLUSTER_ID="$(bin/kafka-storage.sh random-uuid)"
#+end_src

Format Log Directories

#+begin_src shell
bin/kafka-storage.sh format --standalone -t $KAFKA_CLUSTER_ID -c config/server.properties
#+end_src

Start the Kafka Server

#+begin_src shell
bin/kafka-server-start.sh config/server.properties
#+end_src

*** MySQL setup:

**** Docker

#+begin_src shell
docker run --name movieapp_db -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=movieapp -p 3306:3306 -d mysql:latest
#+end_src

#+begin_src shell
docker exec -i movieapp_db mysql movieapp -h localhost -P 3306 --protocol=tcp -uroot -ppassword < schema/schema.sql
#+end_src

Create .env file in pkg/mysql/ directory and add password:
#+begin_src shell
PASSWORD=password
#+end_src

**** Local setup

Create movieapp database making sure that mysql is running in port 3306 (default port).

Create schema using:
#+begin_src shell
mysql -u root -p movieapp < schema/schema.sql
#+end_src

Create =.env= file in =pkg/mysql/= directory and add password:
#+begin_src shell
PASSWORD=<your-root-password>
#+end_src

*** Run the services

#+begin_src shell
go run metadata/cmd/main.go
go run rating/cmd/main.go
go run movie/cmd/main.go
#+end_src
